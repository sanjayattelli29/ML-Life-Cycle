'use client';

import React, { useEffect, useState, useRef } from 'react';

import N8nInsights from './n8n';
import { ArrowLeftIcon } from '@heroicons/react/24/outline';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import { toast } from 'react-hot-toast';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  BarController,
  ChartConfiguration
} from 'chart.js';



// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  BarController,
  Title,
  Tooltip,
  Legend
);

interface Dataset {
  _id: string;
  name: string;
  columns: Array<{
    name: string;
    type: 'numeric' | 'text' | 'date';
  }>;
  data: Record<string, string | number>[];
}

interface AnalysisResult {
  overall_score: number;
  quality_label: string;
  label_probabilities: {
    Low: number;
    Medium: number;
    High: number;
  };
  metric_scores: Record<string, number>;
  top_issues: Record<string, number>;
  prediction_time: string;
}

const formatMetricName = (metric: string): string => {
  return metric.replace(/_/g, ' ');
};

const getScoreStatus = (score: number): string => {
  if (score >= 90) return 'Excellent';
  if (score >= 70) return 'Good';
  if (score >= 50) return 'Moderate';
  return 'Poor';
};

const getScoreBadgeClass = (score: number): string => {
  if (score >= 90) return 'bg-green-100 text-green-700';
  if (score >= 70) return 'bg-blue-100 text-blue-700';
  if (score >= 50) return 'bg-yellow-100 text-yellow-700';
  return 'bg-red-100 text-red-700';
};

export default function QualityMetrics() {
  const { data: session } = useSession();
  const [datasets, setDatasets] = useState<Dataset[]>([]);
  const [currentDataset, setCurrentDataset] = useState<Dataset | null>(null);
  const [metrics, setMetrics] = useState<Record<string, number|string|null>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState<string>('all');
  const [metricsSaved, setMetricsSaved] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const chartRef = useRef<ChartJS | null>(null);


  // Force re-render to ensure chart updates
  const [forceUpdate, setForceUpdate] = useState(0);

  const convertToCSV = (dataset: Dataset): string => {
    const headers = dataset.columns.map(col => col.name).join(',') + '\n';
    const rows = dataset.data.map(row => 
      dataset.columns.map(col => {
        const value = row[col.name];
        if (typeof value === 'string') {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      }).join(',')
    ).join('\n');
    
    return headers + rows;
  };

  interface MetricCategory {
    name: string;
    metrics: string[];
  }

  const metricCategories: MetricCategory[] = [
    {
      name: 'data_structure',
      metrics: [
        'Row_Count',
        'Column_Count',
        'File_Size_MB',
        'Numeric_Columns_Count',
        'Categorical_Columns_Count',
        'Date_Columns_Count'
      ]
    },
    {
      name: 'data_quality',
      metrics: [
        'Missing_Values_Pct',
        'Duplicate_Records_Count',
        'Outlier_Rate',
        'Inconsistency_Rate',
        'Data_Type_Mismatch_Rate',
        'Data_Quality_Score',
        'Data_Density_Completeness',
        'Domain_Constraint_Violations'
      ]
    },
    {
      name: 'statistical',
      metrics: [
        'Mean_Median_Drift',
        'Feature_Correlation_Mean',
        'Null_vs_NaN_Distribution',
        'Variance_Threshold_Check',
        'Range_Violation_Rate'
      ]
    },
    {
      name: 'advanced',
      metrics: [
        'Feature_Importance_Consistency',
        'Class_Overlap_Score',
        'Label_Noise_Rate',
        'Target_Imbalance',
        'Encoding_Coverage_Rate',
        'Cardinality_Categorical',
        'Data_Freshness',
        'Anomaly_Count'
      ]
    }
  ];

  const filterMetricsByCategory = (metrics: Record<string, number|string|null>, category: string): Array<{name: string, value: number|string|null}> => {
    if (category === 'all') {
      return Object.entries(metrics).map(([name, value]) => ({ name, value }));
    }

    const categoryMetrics = metricCategories.find(cat => cat.name === category)?.metrics || [];
    return Object.entries(metrics)
      .filter(([name]) => categoryMetrics.includes(name))
      .map(([name, value]) => ({ name, value }));
  };

  const getMetricScore = (name: string, value: number | string | null): 'Poor' | 'Average' | 'Good' | 'Great' | 'N/A' => {
    if (value === null || typeof value !== 'number') return 'N/A';

    const scoringRules: Record<string, { great: number, good: number, average: number, reverse?: boolean }> = {
      'Data_Quality_Score': { great: 90, good: 75, average: 60 },
      'Data_Density_Completeness': { great: 0.95, good: 0.85, average: 0.70 },
      'Feature_Correlation_Mean': { great: 0.7, good: 0.5, average: 0.3 },
      'Feature_Importance_Consistency': { great: 0.8, good: 0.6, average: 0.4 },
      'Encoding_Coverage_Rate': { great: 0.95, good: 0.85, average: 0.70 },
      'Row_Count': { great: 10000, good: 1000, average: 100 },
      'Column_Count': { great: 20, good: 10, average: 5 },
      'Missing_Values_Pct': { great: 2, good: 5, average: 15, reverse: true },
      'Duplicate_Records_Count': { great: 10, good: 50, average: 200, reverse: true },
      'Outlier_Rate': { great: 0.02, good: 0.05, average: 0.15, reverse: true },
      'Inconsistency_Rate': { great: 0.01, good: 0.05, average: 0.15, reverse: true },
      'Data_Type_Mismatch_Rate': { great: 0.01, good: 0.05, average: 0.15, reverse: true },
      'Domain_Constraint_Violations': { great: 5, good: 20, average: 100, reverse: true },
      'Mean_Median_Drift': { great: 0.1, good: 0.3, average: 0.6, reverse: true },
      'Null_vs_NaN_Distribution': { great: 0.05, good: 0.15, average: 0.30, reverse: true },
      'Range_Violation_Rate': { great: 0.01, good: 0.05, average: 0.15, reverse: true },
      'Class_Overlap_Score': { great: 0.1, good: 0.3, average: 0.6, reverse: true },
      'Label_Noise_Rate': { great: 0.02, good: 0.05, average: 0.15, reverse: true },
      'Target_Imbalance': { great: 0.1, good: 0.3, average: 0.6, reverse: true },
      'Anomaly_Count': { great: 10, good: 50, average: 200, reverse: true },
    };

    const rule = scoringRules[name];
    if (!rule) {
      if (value >= 0.8) return 'Great';
      if (value >= 0.6) return 'Good';
      if (value >= 0.4) return 'Average';
      return 'Poor';
    }

    const { great, good, average, reverse = false } = rule;

    if (reverse) {
      if (value <= great) return 'Great';
      if (value <= good) return 'Good';
      if (value <= average) return 'Average';
      return 'Poor';
    } else {
      if (value >= great) return 'Great';
      if (value >= good) return 'Good';
      if (value >= average) return 'Average';
      return 'Poor';
    }
  };

  const getScoreColor = (score: string): string => {
    switch (score) {
      case 'Great': return 'text-green-600 bg-green-100';
      case 'Good': return 'text-blue-600 bg-blue-100';
      case 'Average': return 'text-yellow-600 bg-yellow-100';
      case 'Poor': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getQualityRange = (score: string): string => {
    switch (score.toLowerCase()) {
      case 'poor':
        return '0-30%';
      case 'fair':
        return '31-50%';
      case 'good':
        return '51-75%';
      case 'great':
        return '76-90%';
      case 'excellent':
        return '91-100%';
      default:
        return 'N/A';
    }
  };



  const handleDatasetChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedId = e.target.value;
    const selected = datasets.find(d => d._id === selectedId);
    
    if (selected) {
      setCurrentDataset(selected);
      setMetricsSaved(false);
      setIsLoading(true);
      setError('');

      try {
        // Check MongoDB cache first
        console.log('Checking MongoDB cache for:', {
          userId: session?.user?.id,
          datasetId: selected._id
        });

        const mongoResponse = await fetch(`/api/metrics/get?userId=${session?.user?.id}&datasetId=${selected._id}`);
        const data = await mongoResponse.json();
        
        console.log('MongoDB cache response:', {
          status: mongoResponse.status,
          data: data
        });
        
        // Check if we have valid cached metrics
        if (mongoResponse.ok && data.success && data.metrics) {
          console.log('Found valid cached metrics');
          setMetrics(data.metrics);
          setMetricsSaved(true);
          toast.success('Loaded metrics from cache');
          setIsLoading(false);
          return;
        }

        console.log('No valid cache found, calling Flask API');
        
        // If no cached data, proceed with Flask backend
        toast.loading('Calculating new metrics...', { duration: 3000 });
        
        const csvData = convertToCSV(selected);
        const flaskResponse = await fetch('https://metric-models-dataviz.onrender.com/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            datasetId: selected._id,
            datasetName: selected.name,
            csvData,
            targetColumn: null
          }),
        });

        if (!flaskResponse.ok) {
          throw new Error('Failed to generate metrics from backend');
        }

        const result = await flaskResponse.json();
        
        if (!result.success) {
          throw new Error(result.error || 'Failed to analyze dataset');
        }

        // Display the new metrics (but don't save automatically)
        setMetrics(result.metrics);
        toast.success('Generated new metrics');
        setMetricsSaved(false); // Reset to allow saving
        
      } catch (error) {
        console.error('Error processing dataset:', error);
        setError(error instanceof Error ? error.message : 'Failed to process dataset');
        toast.error(error instanceof Error ? error.message : 'Failed to process dataset');
        setMetrics({});
      } finally {
        setIsLoading(false);
      }
    } else {
      setCurrentDataset(null);
      setMetrics({});
    }
  };

  useEffect(() => {
    const fetchDatasets = async () => {
      if (session?.user?.id) {
        try {
          setIsLoading(true);
          // Replace with your actual API endpoint
          const response = await fetch('/api/datasets');
          if (!response.ok) {
            throw new Error('Failed to fetch datasets');
          }
          const data = await response.json();
          setDatasets(data);
        } catch (err) {
          setError('Failed to fetch datasets. Please try again.');
          console.error('Error fetching datasets:', err);
        } finally {
          setIsLoading(false);
        }
      }
    };

    fetchDatasets();
  }, [session?.user?.id]);

  const saveMetricsToMongoDB = async (datasetId: string, metrics: Record<string, number | string | null>) => {
    if (!session?.user?.id) return;
    
    try {
      setIsSaving(true);
      setError('');
      
      const response = await fetch('/api/metrics/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: session.user.id,
          datasetId,
          metrics: metrics,
          timestamp: new Date().toISOString()
        }),
      });

      if (response.ok) {
        setMetricsSaved(true);
        toast.success('Metrics saved successfully');
      } else {
        const error = await response.json();
        throw new Error(error.message || 'Failed to save metrics');
      }
    } catch (error) {
      console.error('Error saving metrics:', error);
      setMetricsSaved(false);
      if (error instanceof Error) {
        setError(error.message);
        toast.error(`Failed to save metrics: ${error.message}`);
      } else {
        setError('Failed to save metrics');
        toast.error('Failed to save metrics');
      }
    } finally {
      setIsSaving(false);
    }
  };

  const performMLAnalysis = async () => {
    if (!metrics || Object.keys(metrics).length === 0) {
      toast.error('No metrics available to analyze.');
      return;
    }

    setIsAnalyzing(true);
    try {
      // Convert metric values to numbers and ensure all required fields exist
      const features: Record<string, number> = {
        Row_Count: Number(metrics.Row_Count) || 0,
        Column_Count: Number(metrics.Column_Count) || 0,
        File_Size_MB: Number(metrics.FileSize) || 0,
        Numeric_Columns_Count: Number(metrics.Numeric_Columns_Count) || 0,
        Categorical_Columns_Count: Number(metrics.Categorical_Columns_Count) || 0,
        Date_Columns_Count: Number(metrics.Date_Columns_Count) || 0,
        Missing_Values_Pct: Number(metrics.Missing_Values_Pct) || 0,
        Duplicate_Records_Count: Number(metrics.Duplicate_Records_Count) || 0,
        Outlier_Rate: Number(metrics.Outlier_Rate) || 0,
        Inconsistency_Rate: Number(metrics.Inconsistency_Rate) || 0,
        Data_Type_Mismatch_Rate: Number(metrics.Data_Type_Mismatch_Rate) || 0,
        Data_Quality_Score: Number(metrics.Data_Quality_Score) || 0,
        Data_Density_Completeness: Number(metrics.Data_Density_Completeness) || 0,
        Domain_Constraint_Violations: Number(metrics.Domain_Constraint_Violations) || 0,
        Mean_Median_Drift: Number(metrics.Mean_Median_Drift) || 0,
        Feature_Correlation_Mean: Number(metrics.Feature_Correlation_Mean) || 0,
        Null_vs_NaN_Distribution: Number(metrics.Null_vs_NaN_Distribution) || 0,
        Variance_Threshold_Check: Number(metrics.Variance_Threshold_Check) || 0,
        Range_Violation_Rate: Number(metrics.Range_Violation_Rate) || 0,
        Cardinality_Categorical: Number(metrics.Cardinality_Categorical) || 0,
        Target_Imbalance: Number(metrics.Target_Imbalance) || 0,
        Feature_Importance_Consistency: Number(metrics.Feature_Importance_Consistency) || 0,
        Class_Overlap_Score: Number(metrics.Class_Overlap_Score) || 0,
        Label_Noise_Rate: Number(metrics.Label_Noise_Rate) || 0,
        Data_Freshness: Number(metrics.Data_Freshness) || 0,
        Anomaly_Count: Number(metrics.Anomaly_Count) || 0,
        Encoding_Coverage_Rate: Number(metrics.Encoding_Coverage_Rate) || 0
      };

      // Calculate File_Size_MB if not present
      if (!features.File_Size_MB) {
        const bytesPerCell = 8;
        const totalBytes = features.Row_Count * features.Column_Count * bytesPerCell;
        features.File_Size_MB = Number((totalBytes / (1024 * 1024)).toFixed(2));
      }

      const response = await fetch('https://data-viz-ai-model.onrender.com/predict', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ features })
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to perform deep learning analysis');
      }

      console.log('Received analysis result:', result);
      setAnalysisResult(result);
      setForceUpdate(prev => prev + 1); // Force chart update
      toast.success('Deep learning analysis completed successfully!');
    } catch (error) {
      console.error('Deep Learning Analysis Error:', error);
      toast.error(error instanceof Error ? error.message : 'Failed to perform analysis');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const createMetricChart = (metrics: Record<string, number>) => {
    console.log('Creating chart with metrics:', metrics);
    
    if (!canvasRef.current) {
      console.log('Canvas ref not ready');
      return;
    }

    // Ensure canvas is properly sized
    const container = canvasRef.current.parentElement;
    if (container) {
      canvasRef.current.width = container.clientWidth;
      canvasRef.current.height = container.clientHeight;
    }

    // Destroy existing chart instance if it exists
    if (chartRef.current) {
      console.log('Destroying existing chart');
      chartRef.current.destroy();
      chartRef.current = null;
    }

    const sortedMetrics = Object.entries(metrics).sort((a, b) => a[1] - b[1]);
    const worstMetrics = sortedMetrics.slice(0, 5);
    const bestMetrics = sortedMetrics.slice(-5).reverse();
    
    const selectedMetrics = [...worstMetrics, ...bestMetrics];
    console.log('Selected metrics for chart:', selectedMetrics);
    
    const labels = selectedMetrics.map(([metric]) => formatMetricName(metric));
    const scores = selectedMetrics.map(([,score]) => score);
    const colors = scores.map(score => {
      if (score >= 90) return 'rgba(34, 197, 94, 0.7)';
      if (score >= 70) return 'rgba(59, 130, 246, 0.7)';
      if (score >= 50) return 'rgba(234, 179, 8, 0.7)';
      return 'rgba(239, 68, 68, 0.7)';
    });

    const ctx = canvasRef.current.getContext('2d');
    if (!ctx) {
      console.log('Could not get 2D context');
      return;
    }

    try {
      // Clear any existing content
      ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);

      const config: ChartConfiguration = {
        type: 'bar',
        data: {
          labels,
          datasets: [{
            label: 'Metric Scores',
            data: scores,
            backgroundColor: colors,
            borderColor: colors.map(color => color.replace('0.7', '1')),
            borderWidth: 1,
            barThickness: 30,
            maxBarThickness: 40
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              grid: {
                display: true,
                color: 'rgba(0, 0, 0, 0.1)'
              },
              ticks: {
                font: {
                  size: 12
                },
                color: '#4B5563'
              },
              title: {
                display: true,
                text: 'Score',
                color: '#374151',
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            x: {
              grid: {
                display: false
              },
              ticks: {
                font: {
                  size: 11
                },
                color: '#4B5563',
                maxRotation: 45,
                minRotation: 45
              },
              title: {
                display: true,
                text: 'Metrics',
                color: '#374151',
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            }
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleFont: {
                size: 14
              },
              bodyFont: {
                size: 13
              },
              padding: 12,
              callbacks: {
                label: function(context) {
                  return `Score: ${context.raw}%`;
                }
              }
            }
          }
        }
      };

      console.log('Creating new chart with config:', config);
      chartRef.current = new ChartJS(ctx, config);
    } catch (error) {
      console.error('Error creating chart:', error);
    }
  };

  // Update chart when metrics change
  useEffect(() => {
    console.log('Metrics changed:', metrics);
    const updateChart = () => {
      if (!metrics || Object.keys(metrics).length === 0) {
        console.log('No metrics available');
        return;
      }
      
      const numericMetrics = Object.entries(metrics).reduce((acc, [key, value]) => {
        if (typeof value === 'number') {
          acc[key] = value;
        }
        return acc;
      }, {} as Record<string, number>);
      
      if (Object.keys(numericMetrics).length > 0) {
        console.log('Updating chart with numeric metrics:', numericMetrics);
        createMetricChart(numericMetrics);
      } else {
        console.log('No numeric metrics found');
      }
    };

    const timer = setTimeout(() => {
      updateChart();
    }, 100); // Small delay to ensure canvas is ready

    return () => {
      clearTimeout(timer);
      if (chartRef.current) {
        chartRef.current.destroy();
      }
    };
  }, [metrics, forceUpdate]);

  // Effect to initialize and update chart when analysis results change
  useEffect(() => {
    let isMounted = true;

    const initChart = async () => {
      if (!analysisResult?.metric_scores || Object.keys(analysisResult.metric_scores).length === 0) {
        console.log('No analysis result metrics available');
        return;
      }

      // Wait for next frame to ensure DOM is ready
      await new Promise(resolve => requestAnimationFrame(resolve));
      
      if (!isMounted) return;

      console.log('Creating chart from analysis result:', analysisResult.metric_scores);
      try {
        createMetricChart(analysisResult.metric_scores);
      } catch (error) {
        console.error('Failed to create chart:', error);
      }
    };

    if (analysisResult) {
      initChart();
    }

    return () => {
      isMounted = false;
      if (chartRef.current) {
        chartRef.current.destroy();
        chartRef.current = null;
      }
    };
  }, [analysisResult]);

  // Additional effect to force chart re-render on window resize
  useEffect(() => {
    const handleResize = () => {
      setForceUpdate(prev => prev + 1);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-600 border-t-transparent mx-auto mb-4"></div>
          <p className="text-gray-700 font-medium">
            {metrics && Object.keys(metrics).length > 0 
              ? 'Loading metrics from cache...' 
              : 'Calculating quality metrics...'}
          </p>
          <p className="text-gray-500 text-sm mt-2">This may take a moment</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50">
        <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full mx-4">
          <div className="text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Error Loading Data</h3>
            <p className="text-gray-600 mb-6">{error}</p>
            <Link 
              href="/dashboard" 
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
            >
              <ArrowLeftIcon className="h-4 w-4 mr-2" /> 
              Back to Dashboard
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-8 px-4 max-w-7xl">
        {/* Header Section */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-4xl font-bold text-gray-900 mb-2">Quality Metrics</h1>
            <p className="text-lg text-gray-600">Comprehensive analysis of your dataset quality</p>
          </div>
          <Link 
            href="/dashboard" 
            className="inline-flex items-center px-4 py-2 bg-white text-gray-700 rounded-lg hover:bg-gray-100 transition-colors duration-200 font-medium shadow border border-gray-200"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-2" /> 
            Back to Dashboard
          </Link>
        </div>

        {datasets.length > 0 ? (
          <div className="space-y-8">
            {/* Dataset Selection */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <label htmlFor="dataset-select" className="block text-sm font-semibold text-gray-900 mb-3">
                Select Dataset
              </label>
              <select
                id="dataset-select"
                className="block w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-900 font-medium"
                value={currentDataset?._id || ''}
                onChange={handleDatasetChange}
              >
                <option value="">Select a dataset</option>
                {datasets.map((dataset) => (
                  <option key={dataset._id} value={dataset._id}>
                    {dataset.name} ({dataset._id.substring(0, 8)}...)
                  </option>
                ))}
              </select>
            </div>
            
            {currentDataset && (
              <div className="space-y-8">
                {/* Dataset Overview */}
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-8">
                  <h2 className="text-2xl font-bold text-gray-900 mb-6">{currentDataset.name}</h2>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {/* Dataset Stats */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600 mb-1">Total Rows</p>
                          <p className="text-3xl font-bold text-gray-900">{currentDataset.data.length.toLocaleString()}</p>
                        </div>
                        <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                          <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2V7m0 10a2 2 0 012-2h2a2 2 0 012 2m-1 4l-3 3m0 0l-3-3m3 3V4" />
                          </svg>
                        </div>
                      </div>
                    </div>
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600 mb-1">Columns</p>
                          <p className="text-3xl font-bold text-gray-900">{currentDataset.columns.length}</p>
                        </div>
                        <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                          <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                          </svg>
                        </div>
                      </div>
                    </div>
                    {/* Analysis Button */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                      <button
                        onClick={performMLAnalysis}
                        disabled={isAnalyzing}
                        className={`flex items-center justify-between w-full p-4 rounded-lg transition-all duration-200 shadow-md hover:shadow-lg
                          ${isAnalyzing 
                            ? 'bg-purple-100 cursor-not-allowed text-purple-700' 
                            : 'bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700'
                          }`}
                      >
                        <div className="text-left">
                          <p className={`text-sm font-medium ${isAnalyzing ? 'text-purple-700' : 'text-white/90'} mb-1`}>
                            Deep Learning Analysis
                          </p>
                          <p className={`text-lg font-bold ${isAnalyzing ? 'text-purple-700' : 'text-white'}`}>
                            {isAnalyzing ? 'Analyzing...' : 'Start Analysis'}
                          </p>
                        </div>
                        <div className={`w-12 h-12 ${isAnalyzing ? 'bg-purple-200' : 'bg-white/10 backdrop-blur-sm'} rounded-lg flex items-center justify-center`}>
                          {isAnalyzing ? (
                            <div className="animate-spin rounded-full h-6 w-6 border-2 border-purple-700 border-t-transparent" />
                          ) : (
                            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                            </svg>
                          )}
                        </div>
                      </button>
                    </div>
                  </div>
                </div>
                
                {/* Regular Metrics Section */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                  <div className="border-b border-gray-200 px-6 py-4">
                    <div className="flex space-x-1 overflow-x-auto pb-2">
                      {[
                        { key: 'all', label: 'All Metrics', icon: '📊' },
                        { key: 'data_structure', label: 'Structure', icon: '🏗️' },
                        { key: 'data_quality', label: 'Quality', icon: '✨' },
                        { key: 'statistical', label: 'Statistical', icon: '📈' },
                        { key: 'advanced', label: 'Advanced', icon: '🔬' }
                      ].map((tab) => (
                        <button
                          key={tab.key}
                          className={`flex items-center px-4 py-2 rounded-lg font-medium transition-all duration-200 whitespace-nowrap ${
                            activeTab === tab.key 
                              ? 'bg-blue-600 text-white shadow-md' 
                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                          }`}
                          onClick={() => setActiveTab(tab.key)}
                        >
                          <span className="mr-2">{tab.icon}</span>
                          {tab.label}
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Grid View of Simple Metrics */}
                  <div className="w-full px-4 py-6">
                    <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                      {filterMetricsByCategory(metrics, activeTab).map((metric, index) => (
                        <div
                          key={index}
                          className="flex flex-col items-start justify-between p-3 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition duration-150"
                        >
                          <span className="text-sm font-semibold text-gray-800 mb-2">
                            {metric.name.replace(/_/g, ' ')}
                          </span>
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getScoreColor(
                              getMetricScore(metric.name, metric.value)
                            )}`}
                          >
                            {getQualityRange(getMetricScore(metric.name, metric.value))}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Actions and Save Button */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex flex-col md:flex-row md:items-center justify-between space-y-4 md:space-y-0 md:space-x-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">Data Analysis Actions</h3>
                      <p className="text-sm text-gray-600 mt-1">
                        Save the current metric analysis
                      </p>
                    </div>
                    <button
                      onClick={() => saveMetricsToMongoDB(currentDataset._id, metrics)}
                      disabled={isSaving || metricsSaved}
                      className={`px-6 py-3 rounded-lg font-medium transition-all duration-200 flex items-center ${
                        metricsSaved
                          ? 'bg-green-100 text-green-700 cursor-not-allowed'
                          : isSaving
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                          : 'bg-blue-600 text-white hover:bg-blue-700 shadow-md hover:shadow-lg'
                      }`}
                    >
                      {isSaving ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-400 border-t-transparent mr-2"></div>
                          Saving...
                        </>
                      ) : metricsSaved ? (
                        <>
                          <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          Saved
                        </>
                      ) : (
                        'Save Metrics'
                      )}
                    </button>
                  </div>
                </div>

                {/* Deep Learning Analysis Results */}
                {analysisResult && (
                  <div className="space-y-6">
                    {/* Overview Cards */}
                    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                      <h3 className="text-xl font-semibold text-gray-900 mb-4">Deep Learning Analysis Results</h3>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {/* Score Card */}
                        <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg p-6 border border-purple-100">
                          <h4 className="text-lg font-medium text-gray-900 mb-2">Overall Quality Score</h4>
                          <div className="flex items-end space-x-2">
                            <span className="text-4xl font-bold text-purple-600">
                              {Math.round(analysisResult.overall_score)}
                            </span>
                            <span className="text-lg text-purple-600 mb-1">/100</span>
                          </div>
                          <span className={`inline-block px-3 py-1 rounded-full text-sm font-medium mt-2
                            ${analysisResult.quality_label === 'High' ? 'bg-green-100 text-green-700' :
                              analysisResult.quality_label === 'Medium' ? 'bg-yellow-100 text-yellow-700' :
                              'bg-red-100 text-red-700'}`}>
                            {analysisResult.quality_label} Quality
                          </span>
                        </div>

                        {/* Distribution Card */}
                        <div className="bg-white rounded-lg p-6 border border-gray-200">
                          <h4 className="text-lg font-medium text-gray-900 mb-4">Quality Distribution</h4>
                          <div className="space-y-3">
                            {Object.entries(analysisResult.label_probabilities).map(([label, prob]) => (
                              <div key={label} className="space-y-1">
                                <div className="flex justify-between text-sm">
                                  <span className="font-medium text-gray-700">{label}</span>
                                  <span className="text-gray-600">{Math.round(Number(prob) * 100)}%</span>
                                </div>
                                <div className="w-full bg-gray-200 rounded-full h-2">
                                  <div
                                    className={`h-2 rounded-full ${
                                      label === 'High' ? 'bg-green-500' :
                                      label === 'Medium' ? 'bg-yellow-500' :
                                      'bg-red-500'
                                    }`}
                                    style={{ width: `${Math.round(Number(prob) * 100)}%` }}
                                  />
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>

                        {/* Issues Card */}
                        <div className="bg-white rounded-lg p-6 border border-gray-200">
                          <h4 className="text-lg font-medium text-gray-900 mb-4">Critical Issues</h4>
                          <div className="space-y-4">
                            {Object.entries(analysisResult.top_issues).map(([issue, score]) => (
                              <div key={issue} className="flex items-center justify-between">
                                <span className="text-sm font-medium text-gray-700">
                                  {formatMetricName(issue)}
                                </span>
                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getScoreBadgeClass(Number(score) * 100)}`}>
                                  {Math.round(Number(score) * 100)}%
                                </span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Chart */}
                    <div className="bg-gradient-to-br from-white via-blue-50/30 to-purple-50/20 rounded-3xl border border-white/60 backdrop-blur-sm p-8 relative overflow-hidden group hover:scale-[1.01] transition-all duration-700 ease-out">
                      {/* Animated background elements */}
                      <div className="absolute inset-0 opacity-30">
                        <div className="absolute top-0 left-0 w-32 h-32 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-xl animate-pulse"></div>
                        <div className="absolute bottom-0 right-0 w-24 h-24 bg-gradient-to-br from-pink-400/20 to-orange-400/20 rounded-full blur-xl animate-pulse" style={{ animationDelay: '1s' }}></div>
                        <div className="absolute top-1/2 left-1/3 w-16 h-16 bg-gradient-to-br from-green-400/20 to-cyan-400/20 rounded-full blur-xl animate-pulse" style={{ animationDelay: '0.5s' }}></div>
                      </div>

                      {/* Header with enhanced typography and loading indicator */}
                      <div className="relative z-10 mb-8">
                        <div className="flex items-center justify-between">
                          <div>
                            <h3 className="text-3xl font-black bg-gradient-to-r from-slate-900 via-purple-900 to-blue-900 bg-clip-text text-transparent tracking-tight">
                              Metric Performance Overview
                            </h3>
                            <div className="flex items-center space-x-2 mt-2">
                              <div className="w-2 h-2 bg-green-500 rounded-full animate-ping"></div>
                              <span className="text-sm font-medium text-slate-600">Live Data</span>
                            </div>
                          </div>
                          
                          {/* Animated loading indicator */}
                          <div className="flex space-x-1">
                            <div className="w-2 h-8 bg-gradient-to-t from-blue-600 to-purple-600 rounded-full animate-pulse" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-2 h-6 bg-gradient-to-t from-purple-600 to-pink-600 rounded-full animate-pulse" style={{ animationDelay: '150ms' }}></div>
                            <div className="w-2 h-10 bg-gradient-to-t from-pink-600 to-orange-600 rounded-full animate-pulse" style={{ animationDelay: '300ms' }}></div>
                            <div className="w-2 h-4 bg-gradient-to-t from-orange-600 to-red-600 rounded-full animate-pulse" style={{ animationDelay: '450ms' }}></div>
                            <div className="w-2 h-7 bg-gradient-to-t from-red-600 to-purple-600 rounded-full animate-pulse" style={{ animationDelay: '600ms' }}></div>
                          </div>
                        </div>
                      </div>

                      {/* Enhanced chart container */}
                      <div 
                        className="relative w-full h-[450px] bg-gradient-to-br from-white/80 via-slate-50/60 to-blue-50/40 rounded-2xl border border-white/80 backdrop-blur-md p-8 overflow-hidden group-hover:bg-gradient-to-br group-hover:from-white/90 group-hover:via-blue-50/40 group-hover:to-purple-50/30 transition-all duration-1000" 
                        id="chart-container"
                        style={{ 
                          position: 'relative'
                        }}
                      >
                        {/* Glassmorphism overlay */}
                        <div className="absolute inset-0 bg-gradient-to-br from-white/40 via-transparent to-white/20 rounded-2xl"></div>
                        
                        {/* Animated grid pattern */}
                        <div className="absolute inset-0 opacity-10">
                          <div className="w-full h-full" style={{
                            backgroundImage: `
                              linear-gradient(to right, rgb(99 102 241 / 0.3) 1px, transparent 1px),
                              linear-gradient(to bottom, rgb(99 102 241 / 0.3) 1px, transparent 1px)
                            `,
                            backgroundSize: '40px 40px',
                            animation: 'gridMove 20s linear infinite'
                          }}></div>
                        </div>
                        
                        {/* Floating data indicators */}
                        <div className="absolute top-4 right-4 flex space-x-3 z-20">
                          <div className="px-3 py-1 bg-gradient-to-r from-emerald-500/20 to-green-500/20 rounded-full border border-emerald-300/30 backdrop-blur-sm">
                            <span className="text-xs font-semibold text-emerald-700">↗ +12.5%</span>
                          </div>
                          <div className="px-3 py-1 bg-gradient-to-r from-blue-500/20 to-indigo-500/20 rounded-full border border-blue-300/30 backdrop-blur-sm">
                            <span className="text-xs font-semibold text-blue-700">Live</span>
                          </div>
                        </div>

                        {/* Chart canvas with enhanced styling */}
                        <canvas 
                          ref={canvasRef}
                          className="relative z-10 rounded-xl"
                          style={{
                            position: 'absolute',
                            top: '2rem',
                            left: '2rem',
                            width: 'calc(100% - 4rem)',
                            height: 'calc(100% - 4rem)',
                            filter: 'drop-shadow(0 4px 20px rgba(99, 102, 241, 0.1))'
                          }}
                        />

                        {/* Floating metrics overlay */}
                        {analysisResult && (
                          <div className="absolute bottom-0 left-4 right-4 flex justify-between items-center z-20">
                            <div className="flex space-x-4">
                              <div className="px-4 py-2 bg-white/60 backdrop-blur-md rounded-xl border border-white/40">
                                <div className="text-xs font-medium text-slate-600">Overall Score</div>
                                <div className="text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                                  {Math.round(analysisResult.overall_score)}%
                                </div>
                              </div>
                              <div className="px-4 py-2 bg-white/60 backdrop-blur-md rounded-xl border border-white/40">
                                <div className="text-xs font-medium text-slate-600">Quality Level</div>
                                <div className={`text-lg font-bold bg-gradient-to-r ${
                                  analysisResult.quality_label === 'High' ? 'from-green-600 to-emerald-600' :
                                  analysisResult.quality_label === 'Medium' ? 'from-yellow-600 to-orange-600' :
                                  'from-red-600 to-pink-600'
                                } bg-clip-text text-transparent`}>
                                  {analysisResult.quality_label}
                                </div>
                              </div>
                     
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Bottom accent line */}
                      <div className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-b-3xl opacity-60"></div>
                    </div>

                    {/* Gen-Z Enhanced Cards Layout */}
                    <div className="bg-gradient-to-br from-slate-50 to-white rounded-2xl shadow-lg border border-slate-200/50 p-8">
                      <div className="flex items-center gap-3 mb-8">
                        <div className="w-8 h-8 bg-gradient-to-r from-violet-500 to-purple-500 rounded-xl flex items-center justify-center">
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 012 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                          </svg>
                        </div>
                        <h3 className="text-2xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                          Detailed Metric Analysis
                        </h3>
                        <div className="flex gap-1 ml-auto">
                          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                          <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" style={{animationDelay: '0.5s'}}></div>
                          <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse" style={{animationDelay: '1s'}}></div>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                        {Object.entries(analysisResult.metric_scores)
                          .sort(([, a], [, b]) => b - a)
                          .map(([metric, score], index) => (
                            <div key={metric} className="group relative">
                              {/* Glassmorphism card */}
                              <div className="relative backdrop-blur-sm bg-white/70 rounded-2xl border border-white/20 shadow-xl hover:shadow-2xl transition-all duration-500 hover:scale-[1.02] overflow-hidden">
                                
                                {/* Animated background gradient */}
                                <div className="absolute inset-0 bg-gradient-to-br from-violet-50/50 via-transparent to-blue-50/50 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                                
                                {/* Top accent with animated dots */}
                                <div className="relative h-1 bg-gradient-to-r from-slate-100 to-slate-200 overflow-hidden">
                                  <div 
                                    className={`h-full transition-all duration-1000 ease-out ${
                                      score >= 80 ? 'bg-gradient-to-r from-emerald-400 via-green-400 to-teal-400' :
                                      score >= 60 ? 'bg-gradient-to-r from-amber-400 via-yellow-400 to-orange-400' :
                                      'bg-gradient-to-r from-rose-400 via-pink-400 to-red-400'
                                    }`}
                                    style={{ 
                                      width: `${score}%`,
                                      animationDelay: `${index * 0.2}s`
                                    }}
                                  />
                                  <div className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 animate-pulse opacity-40"></div>
                                </div>
                                
                                <div className="relative p-6">
                                  {/* Header with floating badge */}
                                  <div className="flex items-start justify-between mb-4">
                                    <div className="flex-1">
                                      <h4 className="text-sm font-bold text-slate-800 mb-1 leading-tight">
                                        {formatMetricName(metric)}
                                      </h4>
                                      <div className="flex items-center gap-2">
                                        <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-semibold border-2 ${getScoreBadgeClass(score)} transition-all duration-300 group-hover:scale-105`}>
                                          <div className={`w-1.5 h-1.5 rounded-full ${
                                            score >= 80 ? 'bg-emerald-400 animate-pulse' :
                                            score >= 60 ? 'bg-amber-400 animate-pulse' :
                                            'bg-rose-400 animate-pulse'
                                          }`} />
                                          {getScoreStatus(score)}
                                        </span>
                                      </div>
                                    </div>
                                    
                                    {/* Floating score bubble */}
                                    <div className={`relative flex items-center justify-center w-16 h-16 rounded-2xl shadow-lg transition-all duration-300 group-hover:rotate-3 ${
                                      score >= 80 ? 'bg-gradient-to-br from-emerald-100 to-green-100 border-2 border-emerald-200' :
                                      score >= 60 ? 'bg-gradient-to-br from-amber-100 to-yellow-100 border-2 border-amber-200' :
                                      'bg-gradient-to-br from-rose-100 to-pink-100 border-2 border-rose-200'
                                    }`}>
                                      <div className="text-center">
                                        <div className="text-xl font-black text-slate-800 leading-none">
                                          {Math.round(score)}
                                        </div>
                                        <div className="text-xs font-bold text-slate-600">%</div>
                                      </div>
                                      {/* Sparkle effect */}
                                      <div className="absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-r from-yellow-300 to-amber-300 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 animate-ping"></div>
                                    </div>
                                  </div>
                                  
                                  {/* Enhanced progress visualization */}
                                  <div className="space-y-3 mb-4">
                                    {/* Chunky progress bars */}
                                    <div className="flex items-center justify-between">
                                      <span className="text-xs font-bold text-slate-600">Progress</span>
                                      <div className="flex gap-1">
                                        {[...Array(10)].map((_, i) => (
                                          <div
                                            key={i}
                                            className={`w-3 h-2 rounded-sm transition-all duration-500 ${
                                              i < Math.floor(score / 10)
                                                ? score >= 80 ? 'bg-gradient-to-r from-emerald-400 to-green-500 shadow-sm' :
                                                  score >= 60 ? 'bg-gradient-to-r from-amber-400 to-yellow-500 shadow-sm' : 
                                                  'bg-gradient-to-r from-rose-400 to-pink-500 shadow-sm'
                                                : 'bg-slate-200'
                                            }`}
                                            style={{ animationDelay: `${i * 100}ms` }}
                                          />
                                        ))}
                                      </div>
                                    </div>
                                    
                                    {/* Range indicator with emoji */}
                                    <div className="flex items-center justify-between text-xs">
                                      <span className="font-semibold text-slate-500">Range</span>
                                      <div className="flex items-center gap-2">
                                        <span className="text-lg">
                                          {score >= 80 ? '🔥' : score >= 60 ? '⚡' : score >= 40 ? '⚠️' : '❌'}
                                        </span>
                                        <span className="font-bold text-slate-600 bg-slate-100 px-2 py-1 rounded-lg">
                                          {score >= 80 ? '80-100' :
                                           score >= 60 ? '60-79' :
                                           score >= 40 ? '40-59' :
                                           score >= 20 ? '20-39' : '0-19'}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                
                                {/* Bottom glow effect */}
                                <div className={`absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r ${
                                  score >= 80 ? 'from-transparent via-emerald-400 to-transparent' :
                                  score >= 60 ? 'from-transparent via-amber-400 to-transparent' :
                                  'from-transparent via-rose-400 to-transparent'
                                } opacity-0 group-hover:opacity-100 transition-opacity duration-500`} />
                              </div>
                              
                              {/* Floating particles effect */}
                              <div className="absolute inset-0 pointer-events-none">
                                {[...Array(3)].map((_, i) => (
                                  <div
                                    key={i}
                                    className={`absolute w-1 h-1 rounded-full opacity-0 group-hover:opacity-60 transition-all duration-1000 ${
                                      score >= 80 ? 'bg-emerald-400' :
                                      score >= 60 ? 'bg-amber-400' :
                                      'bg-rose-400'
                                    }`}
                                    style={{
                                      top: `${20 + i * 25}%`,
                                      right: `${10 + i * 5}%`,
                                      animationDelay: `${i * 0.3}s`,
                                      animation: 'float 3s ease-in-out infinite'
                                    }}
                                  />
                                ))}
                              </div>
                            </div>
                          ))}
                      </div>
                    </div>

                    <style jsx>{`
                      @keyframes float {
                        0%, 100% { transform: translateY(0px) rotate(0deg); }
                        50% { transform: translateY(-10px) rotate(180deg); }
                      }
                    `}</style>
  <N8nInsights
  metrics={analysisResult?.metric_scores || {}}
  overallScore={analysisResult?.overall_score || 0}
  topIssues={analysisResult?.top_issues || {}}
/>

                  




                  </div>
                )}
              </div>
            )}
          </div>
        ) : (
          <div className="text-center py-16">
            <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No Datasets Found</h3>
            <p className="text-gray-600 mb-6 max-w-md mx-auto">
              Upload some datasets to start analyzing their quality metrics and gain insights into your data.
            </p>
            <Link 
              href="/dashboard" 
              className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium shadow-lg hover:shadow-xl"
            >
              Go to Dashboard
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}