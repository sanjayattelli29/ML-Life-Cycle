'use client';

import React, { useState, useEffect, useRef } from 'react';
import { toast } from 'react-hot-toast';

interface Dataset {
  _id: string;
  name: string;
}

interface ChatMessage {
  type: 'user' | 'bot';
  content: string;
}

const Chatbot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [datasets, setDatasets] = useState<Dataset[]>([]);
  const [selectedDataset, setSelectedDataset] = useState<string | null>(null);
  const [currentMetrics, setCurrentMetrics] = useState<any>(null);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const chatboxRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen) {
      fetchDatasets();
    } else {
      setSelectedDataset(null);
      setCurrentMetrics(null);
      setMessages([]);
    }
  }, [isOpen]);

  const fetchDatasets = async () => {
    try {
      const response = await fetch('/api/metrics/list-datasets');
      if (!response.ok) throw new Error('Failed to fetch datasets');
      const data = await response.json();
      setDatasets(data);
      setMessages([{ type: 'bot', content: 'Please select a dataset to begin.' }]);
    } catch (error) {
      toast.error('Failed to load datasets');
      console.error('Error fetching datasets:', error);
    }
  };

  const handleDatasetSelect = async (datasetId: string) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/metrics/get?datasetId=' + datasetId);
      if (!response.ok) throw new Error('Failed to fetch metrics');
      const data = await response.json();
      
      setCurrentMetrics(data.metrics);
      setSelectedDataset(datasetId);
      setMessages(prev => [
        ...prev,
        { type: 'bot', content: 'Dataset metrics fetched successfully! What would you like to know about this dataset?' }
      ]);
    } catch (error) {
      toast.error('Failed to load dataset metrics');
      console.error('Error fetching metrics:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || !currentMetrics) return;

    const userMessage = inputValue.trim();
    setMessages(prev => [...prev, { type: 'user', content: userMessage }]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await fetch('https://n8n-n91d.onrender.com/webhook/43c92562-6116-4cb3-86c5-4c4cdd9a7c62/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: userMessage,
          metrics: currentMetrics
        })
      });

      if (!response.ok) throw new Error('Failed to get response');
      const data = await response.json();
      
      setMessages(prev => [...prev, { type: 'bot', content: data.response }]);
    } catch (error) {
      toast.error('Failed to get response');
      console.error('Error getting response:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (chatboxRef.current) {
      chatboxRef.current.scrollTop = chatboxRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <button
        onClick={() => setIsOpen(prev => !prev)}
        className="w-14 h-14 rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center"
      >
        {isOpen ? (
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        ) : (
          <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
          </svg>
        )}
      </button>

      {isOpen && (
        <div className="absolute bottom-20 right-0 w-96 h-[500px] bg-white rounded-lg shadow-2xl border border-gray-200 flex flex-col overflow-hidden">
          <div className="p-4 bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
            <h3 className="text-lg font-semibold">AI Assistant</h3>
          </div>

          <div ref={chatboxRef} className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message, index) => (
              <div
                key={index}
                className={'flex ' + (message.type === 'user' ? 'justify-end' : 'justify-start')}
              >
                <div
                  className={'max-w-[80%] rounded-lg p-3 ' + 
                    (message.type === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 text-gray-800')}
                >
                  {message.content}
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 rounded-lg p-3 text-gray-800">
                  <span className="animate-pulse">...</span>
                </div>
              </div>
            )}
          </div>

          <div className="p-4 border-t border-gray-200">
            {!selectedDataset ? (
              <select
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                onChange={(e) => handleDatasetSelect(e.target.value)}
                value={selectedDataset || ''}
              >
                <option value="">Select a dataset</option>
                {datasets.map((dataset) => (
                  <option key={dataset._id} value={dataset._id}>
                    {dataset.name}
                  </option>
                ))}
              </select>
            ) : (
              <form onSubmit={handleSubmit} className="flex gap-2">
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="Ask a question..."
                  className="flex-1 p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <button
                  type="submit"
                  disabled={isLoading}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                >
                  Send
                </button>
              </form>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Chatbot;
